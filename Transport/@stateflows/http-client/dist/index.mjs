var N=a=>{throw TypeError(a)};var S=(a,t,e)=>t.has(a)||N("Cannot "+e);var n=(a,t,e)=>(S(a,t,"read from private field"),e?e.call(a):t.get(a)),d=(a,t,e)=>t.has(a)?N("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(a):t.set(a,e),m=(a,t,e,i)=>(S(a,t,"write to private field"),i?i.call(a,e):t.set(a,e),e);import{SendResult as b,JsonUtils as c}from"@stateflows/common";var f,g=class{constructor(t){d(this,f);this.watches=[];m(this,f,t)}get behaviorId(){return n(this,f).id}handleNotifications(t){let e=this.watches.map(i=>i.notificationName);t.forEach(i=>{e.indexOf(i.name)!==-1&&n(this,f).notify(i)})}};f=new WeakMap;var v=class{constructor(t,e){this.notificationName=t;this.milisecondsSinceLastNotificationCheck=e;this.handlers=[];this.notifications=[]}};import{EventHolder as k,NotificationsRequest as x}from"@stateflows/common";var o,y,u,w=class{constructor(t){this.url=t;d(this,o,new Map);d(this,y,[]);d(this,u);t.slice(-1)!="/"&&(t=t+"/")}updateTimestamp(t){n(this,o).forEach(e=>{e.watches.forEach(i=>{i.lastNotificationCheck=t,delete i.milisecondsSinceLastNotificationCheck})})}handleNotifications(t,e=null){for(let s of n(this,o).values())s.watches.forEach(r=>{r.lastNotificationCheck=e,delete r.milisecondsSinceLastNotificationCheck});let i=new Map;t.forEach(s=>{if(n(this,y).includes(s.id))return;delete s.senderId.$type,delete s.senderId.behaviorClass.$type,delete s.senderId.behaviorClass.environment;let r=c.stringify(s.senderId);i.set(r,i.has(r)?[...i.get(r),s]:[s])});for(let s of i.keys()){let r=i.get(s),l=n(this,o).get(s);if(typeof l!="undefined"){let h=l.watches.map(p=>p.notificationName);l.handleNotifications(r.filter(p=>h.indexOf(p.name)!==-1))}}m(this,y,t.map(s=>s.id))}getWatches(t){t=c.deepClone(t),delete t.$type,delete t.behaviorClass.$type;let e=c.stringify(t);return n(this,o).has(e)?n(this,o).get(e).watches.map(s=>({notificationName:s.notificationName,lastNotificationCheck:s.lastNotificationCheck,milisecondsSinceLastNotificationCheck:s.milisecondsSinceLastNotificationCheck!==null?Date.now()-s.milisecondsSinceLastNotificationCheck:null})):[]}async getAvailableClasses(){return await(await fetch(`${this.url}stateflows/availableClasses`)).json()}async send(t,e){let i=e.payload.$type.split(",")[0].split("."),s=i[i.length-1];s==="CompoundRequest"&&(s=e.payload.events.map(T=>{let I=T.$type.split(",")[0].split(".");return I[I.length-1]}).join(","));let l=await(await fetch(`${this.url}stateflows/send?${s}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:c.stringify({$type:"Stateflows.Common.Transport.Classes.StateflowsRequest, Stateflows.Common.Transport",behaviorId:t,event:e,watches:this.getWatches(t)})})).json(),h=l.response,p=l.validation;return h&&(e.payload.response=h.payload),this.handleNotifications(l.notifications,l.responseTime),new b(e,l.eventStatus,p)}async watch(t,e){n(this,u)==null&&m(this,u,setInterval(this.watchIntervalCallback.bind(this),10*1e3));let i=c.deepClone(t.id);delete i.$type,delete i.behaviorClass.$type;let s=c.stringify(i),r=n(this,o).has(s)?n(this,o).get(s):new g(t);n(this,o).set(s,r),r.watches.findIndex(h=>h.notificationName===e)===-1&&r.watches.push(new v(e,Date.now()))}async unwatch(t,e){if(n(this,o).has(c.stringify(t.id))){let i=n(this,o).get(c.stringify(t.id)),s=i.watches.findIndex(r=>r.notificationName===e);s!==-1&&delete i.watches[s],n(this,o).delete(c.stringify(t.id))}}async watchIntervalCallback(){n(this,o).size!==0&&n(this,o).forEach(async t=>{await this.send(t.behaviorId,new k(new x))})}};o=new WeakMap,y=new WeakMap,u=new WeakMap;var C=class{constructor(t){this.url=t}getTransport(){return Promise.resolve(new w(this.url))}};function $(a){return new C(a)}export{$ as UseHttp};
//# sourceMappingURL=index.mjs.map