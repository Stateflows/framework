{"version":3,"sources":["../src/classes/http-transport.ts","../src/classes/http-transport-factory.ts"],"sourcesContent":["import { Event, BehaviorClass, BehaviorId, IStateflowsClientTransport, SendResult } from \"@stateflows/common\";\r\n\r\nexport class HttpTransport implements IStateflowsClientTransport {\r\n    constructor(private url: string) {\r\n        if (url.slice(-1) != '/') {\r\n            url = url + '/';\r\n        }\r\n    }\r\n\r\n    getAvailableClasses(): Promise<BehaviorClass[]> {\r\n        return new Promise<BehaviorClass[]>(async (resolve, reject) => {\r\n            fetch(`${this.url}stateflows/availableClasses`)\r\n                .then(async result => resolve(await result.json() as BehaviorClass[]))\r\n                .catch(reason => reject(reason));\r\n        });\r\n    }\r\n    \r\n    send(behaviorId: BehaviorId, event: Event): Promise<SendResult> {\r\n        return new Promise<SendResult>(async (resolve, reject) => {\r\n            fetch(\r\n                `${this.url}stateflows/send`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        behaviorIdString: JSON.stringify(behaviorId),\r\n                        eventString: JSON.stringify(event)\r\n                    })\r\n                }\r\n            )\r\n                .then(async result => {\r\n                    let stateflowsResponse = await result.json();\r\n                    let response = JSON.parse(stateflowsResponse.responseString);\r\n                    let validation = JSON.parse(stateflowsResponse.validationString);\r\n                    (event as any).Response = response;\r\n\r\n                    let sendResult = new SendResult(event, stateflowsResponse.eventStatus, validation);\r\n\r\n                    resolve(sendResult);\r\n                })\r\n                .catch(reason => reject(reason));\r\n        });\r\n    }\r\n}","import { IStateflowsClientTransport, IStateflowsClientTransportFactory } from \"@stateflows/common\";\r\nimport { HttpTransport } from \"./http-transport\";\r\n\r\nexport class HttpTransportFactory implements IStateflowsClientTransportFactory {\r\n    constructor(private url: string) {}\r\n\r\n    getTransport(): Promise<IStateflowsClientTransport> {\r\n        return Promise.resolve(new HttpTransport(this.url));\r\n    }\r\n}\r\n\r\nexport function UseHttp(url: string): IStateflowsClientTransportFactory {\r\n    return new HttpTransportFactory(url);\r\n}"],"mappings":"AAAA,OAAuE,cAAAA,MAAkB,qBAElF,IAAMC,EAAN,KAA0D,CAC7D,YAAoBC,EAAa,CAAb,SAAAA,EACZA,EAAI,MAAM,EAAE,GAAK,MACjBA,EAAMA,EAAM,IAEpB,CAEA,qBAAgD,CAC5C,OAAO,IAAI,QAAyB,MAAOC,EAASC,IAAW,CAC3D,MAAM,GAAG,KAAK,GAAG,6BAA6B,EACzC,KAAK,MAAMC,GAAUF,EAAQ,MAAME,EAAO,KAAK,CAAoB,CAAC,EACpE,MAAMC,GAAUF,EAAOE,CAAM,CAAC,CACvC,CAAC,CACL,CAEA,KAAKC,EAAwBC,EAAmC,CAC5D,OAAO,IAAI,QAAoB,MAAOL,EAASC,IAAW,CACtD,MACI,GAAG,KAAK,GAAG,kBACX,CACI,OAAQ,OACR,QAAS,CACL,OAAU,mBACV,eAAgB,kBACpB,EACA,KAAM,KAAK,UAAU,CACjB,iBAAkB,KAAK,UAAUG,CAAU,EAC3C,YAAa,KAAK,UAAUC,CAAK,CACrC,CAAC,CACL,CACJ,EACK,KAAK,MAAMH,GAAU,CAClB,IAAII,EAAqB,MAAMJ,EAAO,KAAK,EACvCK,EAAW,KAAK,MAAMD,EAAmB,cAAc,EACvDE,EAAa,KAAK,MAAMF,EAAmB,gBAAgB,EAC9DD,EAAc,SAAWE,EAE1B,IAAIE,EAAa,IAAIZ,EAAWQ,EAAOC,EAAmB,YAAaE,CAAU,EAEjFR,EAAQS,CAAU,CACtB,CAAC,EACA,MAAMN,GAAUF,EAAOE,CAAM,CAAC,CACvC,CAAC,CACL,CACJ,EC3CO,IAAMO,EAAN,KAAwE,CAC3E,YAAoBC,EAAa,CAAb,SAAAA,CAAc,CAElC,cAAoD,CAChD,OAAO,QAAQ,QAAQ,IAAIC,EAAc,KAAK,GAAG,CAAC,CACtD,CACJ,EAEO,SAASC,EAAQF,EAAgD,CACpE,OAAO,IAAID,EAAqBC,CAAG,CACvC","names":["SendResult","HttpTransport","url","resolve","reject","result","reason","behaviorId","event","stateflowsResponse","response","validation","sendResult","HttpTransportFactory","url","HttpTransport","UseHttp"]}