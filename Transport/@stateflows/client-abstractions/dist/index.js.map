{"version":3,"sources":["../src/index.ts","../src/classes/send-result.ts","../src/classes/request-result.ts","../src/events/event.ts","../src/events/request.ts","../src/events/initialization.request.ts","../src/events/behavior-status.request.ts","../src/behaviors/behavior.ts","../src/locators/behavior.locator.ts","../src/events/current-state.request.ts","../src/behaviors/state-machine.ts","../src/locators/state-machine.locator.ts","../src/ids/behavior.id.ts","../src/ids/behavior.class.ts","../src/events/available-behavior-classes.request.ts","../src/events/behavior-instances.request.ts","../src/behaviors/system.ts","../src/behaviors/activity.ts","../src/locators/activity.locator.ts","../src/classes/stateflows-client.ts","../src/ids/state-machine.id.ts","../src/ids/activity.id.ts","../src/events/response.ts","../src/events/initialization.response.ts","../src/events/behavior-status.response.ts","../src/events/plant-uml.request.ts","../src/events/plant-uml.response.ts","../src/enums/event-status.ts","../src/enums/behavior-status.ts","../src/events/available-behavior-classes.response.ts","../src/events/behavior-instances.response.ts"],"sourcesContent":["export { StateflowsClient } from \"./classes/stateflows-client\";\r\nexport { SendResult } from \"./classes/send-result\";\r\nexport { RequestResult } from \"./classes/request-result\";\r\nexport { BehaviorClass } from \"./ids/behavior.class\";\r\nexport { BehaviorId } from \"./ids/behavior.id\";\r\nexport { StateMachineId } from \"./ids/state-machine.id\";\r\nexport { ActivityId } from \"./ids/activity.id\";\r\nexport { Event } from \"./events/event\";\r\nexport { Request } from \"./events/request\";\r\nexport { InitializationRequest } from \"./events/initialization.request\";\r\nexport { InitializationResponse } from \"./events/initialization.response\";\r\nexport { Response } from \"./events/response\";\r\nexport { BehaviorStatusRequest } from \"./events/behavior-status.request\";\r\nexport { BehaviorStatusResponse } from \"./events/behavior-status.response\";\r\nexport { PlantUmlRequest } from \"./events/plant-uml.request\";\r\nexport { PlantUmlResponse } from \"./events/plant-uml.response\";\r\nexport { IBehaviorLocator } from \"./interfaces/behavior.locator\";\r\nexport { IBehavior } from \"./interfaces/behavior\";\r\nexport { ISystem } from \"./interfaces/system\";\r\nexport { IStateMachineLocator } from \"./interfaces/state-machine.locator\";\r\nexport { IActivityLocator } from \"./interfaces/activity.locator\";\r\nexport { IStateMachine } from \"./interfaces/state-machine\";\r\nexport { IActivity } from \"./interfaces/activity\";\r\nexport { EventStatus } from \"./enums/event-status\";\r\nexport { BehaviorStatus } from \"./enums/behavior-status\";\r\nexport { AvailableBehaviorClassesRequest } from \"./events/available-behavior-classes.request\";\r\nexport { AvailableBehaviorClassesResponse } from \"./events/available-behavior-classes.response\";\r\nexport { BehaviorInstancesRequest } from \"./events/behavior-instances.request\";\r\nexport { BehaviorInstancesResponse } from \"./events/behavior-instances.response\";\r\nexport { IStateflowsClientTransport } from \"./interfaces/stateflows-client-transport\";\r\nexport { IStateflowsClientTransportFactory } from \"./interfaces/stateflows-client-transport-factory\";\r\n","import { EventStatus } from \"../enums/event-status\";\r\nimport { EventValidation } from \"./event-validation\";\r\n\r\nexport class SendResult {\r\n    constructor(\r\n        public Event: Event,\r\n        public Status: EventStatus,\r\n        public Validation: EventValidation,\r\n    ) {}\r\n}","import { EventStatus } from \"../enums/event-status\";\r\nimport { EventValidation } from \"./event-validation\";\r\nimport { SendResult } from \"./send-result\";\r\n\r\nexport class RequestResult<TResponse> extends SendResult {\r\n    constructor(\r\n        public Response: TResponse,\r\n        event: Event,\r\n        status: EventStatus,\r\n        validation: EventValidation,\r\n    ) {\r\n        super(event, status, validation);\r\n    }\r\n}","export class Event {\r\n}","import { Response } from \"./response\";\r\nimport { Event } from \"./event\";\r\n\r\nexport class Request<TResponse extends Response> extends Event {\r\n\r\n}","import { Request } from \"./request\";\r\nimport { InitializationResponse } from \"./initialization.response\";\r\n\r\nexport class InitializationRequest extends Request<InitializationResponse> {\r\n    public $type = \"Stateflows.Common.InitializationRequest, Stateflows.Common\";\r\n}","import { Request } from \"./request\";\r\nimport { BehaviorStatusResponse } from \"./behavior-status.response\";\r\n\r\nexport class BehaviorStatusRequest extends Request<BehaviorStatusResponse> {\r\n    public $type = \"Stateflows.Common.BehaviorStatusRequest, Stateflows.Common\";\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}","import { Request } from \"../events/request\";\r\nimport { IBehavior } from \"../interfaces/behavior\";\r\nimport { SendResult } from \"../classes/send-result\";\r\nimport { RequestResult } from \"../classes/request-result\";\r\nimport { InitializationResponse } from \"../events/initialization.response\";\r\nimport { BehaviorStatusResponse } from \"../events/behavior-status.response\";\r\nimport { BehaviorId } from \"../ids/behavior.id\";\r\nimport { Response } from \"../events/response\";\r\nimport { InitializationRequest } from \"../events/initialization.request\";\r\nimport { Event } from \"../events/event\";\r\nimport { BehaviorStatusRequest } from \"../events/behavior-status.request\";\r\nimport { IStateflowsClientTransport } from \"../interfaces/stateflows-client-transport\";\r\n\r\nexport class Behavior implements IBehavior {\r\n    #transportPromise: Promise<IStateflowsClientTransport>\r\n\r\n    constructor(transportPromiseOrBehavior: Promise<IStateflowsClientTransport> | Behavior, public behaviorId: BehaviorId) {\r\n        this.#transportPromise = transportPromiseOrBehavior instanceof Behavior\r\n            ? transportPromiseOrBehavior.#transportPromise\r\n            : this.#transportPromise = transportPromiseOrBehavior;\r\n    }\r\n\r\n    send(event: Event): Promise<SendResult> {\r\n        return new Promise<SendResult>(async (resolve, reject) => {\r\n            let hub = await this.#transportPromise;\r\n            resolve(await hub.send(this.behaviorId, event));\r\n        });\r\n    }\r\n\r\n    request<TResponse extends Response>(request: Request<TResponse>): Promise<RequestResult<TResponse>> {\r\n        return new Promise<RequestResult<TResponse>>(async (resolve, reject) => {\r\n            let result = await this.send(request);\r\n            resolve(new RequestResult<TResponse>((result as any).Response as TResponse, result.Event, result.Status, result.Validation));\r\n        });\r\n    }\r\n\r\n    initialize(initializationRequest?: InitializationRequest): Promise<RequestResult<InitializationResponse>> {\r\n        if (typeof initializationRequest === \"undefined\") {\r\n            initializationRequest = new InitializationRequest();\r\n        }\r\n\r\n        return this.request(initializationRequest);\r\n    }\r\n\r\n    getStatus(): Promise<RequestResult<BehaviorStatusResponse>> {\r\n        return this.request(new BehaviorStatusRequest());\r\n    }\r\n}","import { Behavior } from \"../behaviors/behavior\";\r\nimport { BehaviorClass } from \"../ids/behavior.class\";\r\nimport { BehaviorId } from \"../ids/behavior.id\";\r\nimport { IBehavior } from \"../interfaces/behavior\";\r\nimport { IBehaviorLocator } from \"../interfaces/behavior.locator\";\r\nimport { IStateflowsClientTransport } from \"../interfaces/stateflows-client-transport\";\r\n\r\nexport class BehaviorLocator implements IBehaviorLocator {\r\n    private behaviorClasses: BehaviorClass[] = [];\r\n\r\n    private transportPromise: Promise<IStateflowsClientTransport>;\r\n\r\n    constructor(transportPromise: Promise<IStateflowsClientTransport>) {\r\n        this.transportPromise = new Promise<IStateflowsClientTransport>((resolve, reject) => {\r\n            transportPromise\r\n                .then(transport => {\r\n                    transport.getAvailableClasses().then(result => {\r\n                        this.behaviorClasses = result;\r\n                        resolve(transport);\r\n                    });\r\n                })\r\n                .catch(reason => reject(reason));\r\n        });\r\n    }\r\n\r\n    locateBehavior(behaviorId: BehaviorId): Promise<IBehavior> {\r\n        return new Promise<IBehavior>((resolve, reject) => {\r\n            this.transportPromise\r\n                .then(hub => {\r\n                    if (this.behaviorClasses.findIndex(behaviorClass => \r\n                        behaviorClass.type === behaviorId.behaviorClass.type &&\r\n                        behaviorClass.name === behaviorId.behaviorClass.name\r\n                    ) !== -1) {\r\n                        resolve(new Behavior(this.transportPromise, behaviorId));\r\n                    }\r\n                    else\r\n                    {\r\n                        reject(\"Behavior not found\");\r\n                    }\r\n                })\r\n                .catch(reason => reject(reason));\r\n        });\r\n    }\r\n}","import { Request } from \"./request\";\r\nimport { CurrentStateResponse } from \"./current-state.response\";\r\n\r\nexport class CurrentStateRequest extends Request<CurrentStateResponse> {\r\n    public $type = \"Stateflows.StateMachines.Events.CurrentStateRequest, Stateflows.Common\";\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}","import { CurrentStateRequest } from \"../events/current-state.request\";\r\nimport { IStateMachine } from \"../interfaces/state-machine\";\r\nimport { Behavior } from \"./behavior\";\r\n\r\nexport class StateMachine extends Behavior implements IStateMachine {\r\n    constructor(behavior: Behavior) {\r\n        super(behavior, behavior.behaviorId);\r\n    }\r\n\r\n    getCurrentState(): Promise<any> {\r\n        return this.request(new CurrentStateRequest());\r\n    }\r\n}","import { Behavior } from \"../behaviors/behavior\";\r\nimport { StateMachine } from \"../behaviors/state-machine\";\r\nimport { StateMachineId } from \"../ids/state-machine.id\";\r\nimport { IBehaviorLocator } from \"../interfaces/behavior.locator\";\r\nimport { IStateMachine } from \"../interfaces/state-machine\";\r\nimport { IStateMachineLocator } from \"../interfaces/state-machine.locator\";\r\n\r\nexport class StateMachineLocator implements IStateMachineLocator {\r\n    constructor(private behaviorLocator: IBehaviorLocator) {}\r\n\r\n    locateStateMachine(id: StateMachineId): Promise<IStateMachine> {\r\n        return new Promise<IStateMachine>((resolve, reject) => {\r\n            this.behaviorLocator.locateBehavior(id)\r\n                .then(behavior => resolve(new StateMachine(behavior as Behavior)))\r\n                .catch(_ => reject(\"State Machine not found\"));\r\n        });\r\n    }\r\n}","import { BehaviorClass } from \"./behavior.class\";\r\n\r\nexport class BehaviorId {\r\n    constructor(\r\n        public behaviorClass: BehaviorClass,\r\n        public instance: string\r\n    ) {}\r\n\r\n    public $type: string = \"Stateflows.BehaviorId, Stateflows.Common\";\r\n}","export class BehaviorClass {\r\n    constructor(\r\n        public type: string,\r\n        public name: string\r\n    ) {}\r\n    \r\n    public $type: string = \"Stateflows.BehaviorClass, Stateflows.Common\";\r\n}","import { Request } from \"./request\";\r\nimport { AvailableBehaviorClassesResponse } from \"./available-behavior-classes.response\";\r\n\r\nexport class AvailableBehaviorClassesRequest extends Request<AvailableBehaviorClassesResponse> {\r\n    public $type = \"Stateflows.System.AvailableBehaviorClassesRequest, Stateflows.Common\";\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}","import { Request } from \"./request\";\r\nimport { BehaviorInstancesResponse } from \"./behavior-instances.response\";\r\n\r\nexport class BehaviorInstancesRequest extends Request<BehaviorInstancesResponse> {\r\n    public $type = \"Stateflows.System.BehaviorInstancesRequest, Stateflows.Common\";\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}","import { ISystem } from \"../interfaces/system\";\r\nimport { IBehavior } from \"../interfaces/behavior\";\r\nimport { RequestResult } from \"../classes/request-result\";\r\nimport { AvailableBehaviorClassesRequest } from \"../events/available-behavior-classes.request\";\r\nimport { AvailableBehaviorClassesResponse } from \"../events/available-behavior-classes.response\";\r\nimport { BehaviorInstancesRequest } from \"../events/behavior-instances.request\";\r\nimport { BehaviorInstancesResponse } from \"../events/behavior-instances.response\";\r\n\r\nexport class System implements ISystem {\r\n    constructor(private behavior: IBehavior) {}\r\n\r\n    getAvailableBehaviorClasses(): Promise<RequestResult<AvailableBehaviorClassesResponse>> {\r\n        return this.behavior.request(new AvailableBehaviorClassesRequest());\r\n    }\r\n\r\n    getBehaviorInstances(): Promise<RequestResult<BehaviorInstancesResponse>> {\r\n        return this.behavior.request(new BehaviorInstancesRequest());\r\n    }\r\n}","import { IActivity } from \"../interfaces/activity\";\r\nimport { Behavior } from \"./behavior\";\r\n\r\nexport class Activity extends Behavior implements IActivity {\r\n    constructor(behavior: Behavior) {\r\n        super(behavior, behavior.behaviorId);\r\n    }\r\n}","import { Activity } from \"../behaviors/activity\";\r\nimport { Behavior } from \"../behaviors/behavior\";\r\nimport { ActivityId } from \"../ids/activity.id\";\r\nimport { IActivity } from \"../interfaces/activity\";\r\nimport { IActivityLocator } from \"../interfaces/activity.locator\";\r\nimport { IBehaviorLocator } from \"../interfaces/behavior.locator\";\r\n\r\nexport class ActivityLocator implements IActivityLocator {\r\n    constructor(private behaviorLocator: IBehaviorLocator) {}\r\n\r\n    locateActivity(id: ActivityId): Promise<IActivity> {\r\n        return new Promise<IActivity>((resolve, reject) => {\r\n            this.behaviorLocator.locateBehavior(id)\r\n                .then(behavior => resolve(new Activity(behavior as Behavior)))\r\n                .catch(_ => reject(\"State Machine not found\"));\r\n        });\r\n    }\r\n}","import { IBehaviorLocator } from \"../interfaces/behavior.locator\";\r\nimport { IStateMachineLocator } from \"../interfaces/state-machine.locator\";\r\nimport { BehaviorLocator } from \"../locators/behavior.locator\";\r\nimport { StateMachineLocator } from \"../locators/state-machine.locator\";\r\nimport { ISystem } from \"../interfaces/system\";\r\nimport { BehaviorId } from \"../ids/behavior.id\";\r\nimport { BehaviorClass } from \"../ids/behavior.class\";\r\nimport { System } from \"../behaviors/system\";\r\nimport { IActivityLocator } from \"../interfaces/activity.locator\";\r\nimport { ActivityLocator } from \"../locators/activity.locator\";\r\nimport { IStateflowsClientTransportFactory } from \"../interfaces/stateflows-client-transport-factory\";\r\n\r\nexport class StateflowsClient {\r\n    constructor(private transportFactory: IStateflowsClientTransportFactory) { }\r\n\r\n    #behaviorLocator: IBehaviorLocator | null = null;\r\n\r\n    public get behaviorLocator(): IBehaviorLocator {\r\n        return this.#behaviorLocator ??= new BehaviorLocator(this.transportFactory.getTransport());\r\n    }\r\n\r\n    #stateMachineLocator: IStateMachineLocator | null = null;\r\n\r\n    public get stateMachineLocator(): IStateMachineLocator {\r\n        return this.#stateMachineLocator ??= new StateMachineLocator(this.behaviorLocator);\r\n    }\r\n\r\n    #activityLocator: IActivityLocator | null = null;\r\n\r\n    public get activityLocator(): IActivityLocator {\r\n        return this.#activityLocator ??= new ActivityLocator(this.behaviorLocator);\r\n    }\r\n\r\n    #systemPromise: Promise<ISystem> | null = null;\r\n\r\n    public get system(): Promise<ISystem> {\r\n        return this.#systemPromise ??= new Promise<ISystem>((resolve, reject) => {\r\n            this.behaviorLocator.locateBehavior(new BehaviorId(new BehaviorClass(\"System\", \"Stateflows\"), \"\"))\r\n                .then(behavior => resolve(new System(behavior)))\r\n                .catch(reason => reject(reason));\r\n        })\r\n    }\r\n}","import { BehaviorClass } from \"./behavior.class\";\r\nimport { BehaviorId } from \"./behavior.id\";\r\n\r\nexport class StateMachineId extends BehaviorId {\r\n    constructor(\r\n        name: string,\r\n        instance: string\r\n    ) {\r\n        super(new BehaviorClass(\"StateMachine\", name), instance);\r\n    }\r\n}","import { BehaviorClass } from \"./behavior.class\";\r\nimport { BehaviorId } from \"./behavior.id\";\r\n\r\nexport class ActivityId extends BehaviorId {\r\n    constructor(\r\n        name: string,\r\n        instance: string\r\n    ) {\r\n        super(new BehaviorClass(\"Activity\", name), instance);\r\n    }\r\n}","import { Event } from \"./event\";\r\n\r\nexport class Response extends Event {\r\n\r\n}","import { Response } from \"./response\";\r\n\r\nexport class InitializationResponse extends Response {\r\n    constructor(\r\n        public InitializationSuccessful: boolean,\r\n    ) {\r\n        super();\r\n    }\r\n}","import { BehaviorStatus } from \"../enums/behavior-status\";\r\nimport { Response } from \"./response\";\r\n\r\nexport class BehaviorStatusResponse extends Response {\r\n    constructor(\r\n        public BehaviorStatus: BehaviorStatus,\r\n    ) {\r\n        super();\r\n    }\r\n}","import { PlantUmlResponse } from \"./plant-uml.response\";\r\nimport { Request } from \"./request\";\r\n\r\nexport class PlantUmlRequest extends Request<PlantUmlResponse> {\r\n    public $type = \"Stateflows.Extensions.PlantUml.Events.PlantUmlRequest, Stateflows.Extensions.PlantUml\";\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}","import { Response } from \"./response\";\r\n\r\nexport class PlantUmlResponse extends Response {\r\n    constructor(\r\n        public PlantUml: string,\r\n    ) {\r\n        super();\r\n    }\r\n}","export enum EventStatus {\r\n    Undelivered = 0,\r\n    Rejected = 1,\r\n    Invalid = 2,\r\n    NotConsumed = 3,\r\n    Deferred = 4,\r\n    Consumed = 5\r\n}","export enum BehaviorStatus {\r\n    Unknown = 0,\r\n    NotInitialized = 1,\r\n    Initialized = 2,\r\n    Finalized = 3\r\n}","import { Response } from \"./response\";\r\nimport { BehaviorClass } from \"../ids/behavior.class\";\r\n\r\nexport class AvailableBehaviorClassesResponse extends Response {\r\n    constructor(\r\n        public AvailableBehaviorClasses: BehaviorClass[],\r\n    ) {\r\n        super();\r\n    }\r\n}","import { Response } from \"./response\";\r\nimport { BehaviorId } from \"../ids/behavior.id\";\r\nimport { BehaviorStatus } from \"../enums/behavior-status\";\r\n\r\nexport class BehaviorDescriptor\r\n{\r\n    Id: BehaviorId;\r\n    Status: BehaviorStatus;\r\n}\r\n\r\nexport class BehaviorInstancesResponse extends Response {\r\n    constructor(\r\n        public Behaviors: BehaviorDescriptor[],\r\n    ) {\r\n        super();\r\n    }\r\n}"],"mappings":"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","names":["Event","Response","BehaviorStatus","EventStatus","BehaviorStatus"]}