@page "/"
@inject IActivityLocator locator
@inject ISystem system

<PageTitle>Activities</PageTitle>

<div>
    <label>Activity name</label><br />
    <input @bind="ActivityName" size="50" />
</div>
<div>
    <label>Activity instance</label><br />
    <input @bind="ActivityInstance" size="50" />
</div>
<div>
    <button class="btn btn-primary" @onclick="Initialize">Locate and initialize</button>
    <button class="btn btn-primary" @onclick="GetStatus">Check status</button>
    @* <button class="btn btn-primary" @onclick="RunActivity">Run Activity</button> *@
    <button class="btn btn-primary" @onclick="PushActivity">Push Activity</button>
    @* <button class="btn btn-primary" @onclick="SystemRequest">Check system</button> *@
    <button class="btn btn-primary" @onclick="Reset">Reset</button>
</div>

@if (message != "")
{
    <div style="border: solid thin #eee; padding: 10px; margin-top: 10px; border-radius: 10px;">
        <strong>@message</strong>

        @if (plantUmlUrl != null)
        {
            <div style="display: flex;">
                <div style="display: flex; flex-direction: column; width: 300px; padding: 10px; border: solid thin #ddd; background-color: #eee; border-radius: 10px; margin-top: 10px">
                    @if (expectedEvents != null)
                    {
                        <span>Events expected in current state:</span>
                        @foreach (var eventName in expectedEvents)
                        {
                            <button class="btn btn-primary" style="margin-top: 5px;" @onclick="() => SendEvent(eventName)">Send <strong>@GetEventName(eventName)</strong></button>
                        }
                    }
                </div>
                <div style="flex-grow: 1; text-align: center;">
                    <img src="@plantUmlUrl" />
                </div>
            </div>
        }
    </div>
}

@code {
    private string? plantUmlUrl = null;
    private string? activityName = "activity3";
    private string? ActivityName
    {
        get => activityName;
        set
        {
            activityName = value;
            ClearSMInfo();
        }
    }

    private string? activityInstance = "x";
    private string? ActivityInstance
    {
        get => activityInstance;
        set
        {
            activityInstance = value;
            ClearSMInfo();
        }
    }

    private IEnumerable<string>? expectedEvents { get; set; }

    private string message = "";

    private ActivityId GetCurrentId()
    {
        return new ActivityId(activityName, activityInstance);
    }

    private void ClearSMInfo()
    {
        message = "";
        plantUmlUrl = null;
        expectedEvents = null;
    }

    private async Task RefreshAInfo(IActivityBehavior activity)
    {
        plantUmlUrl = (await activity.GetPlantUmlAsync()).Response.GetUrl();
    }

    private async Task SystemRequest()
    {
        var classes = await system.GetAvailableBehaviorClassesAsync();
        var instances = await system.GetBehaviorInstancesAsync();
    }

    private async Task Initialize()
    {
        if (locator.TryLocateActivity(GetCurrentId(), out var activity))
        {
            message = (await activity.InitializeAsync(new X.InitializationRequest1() { Foo = "bar" })).Response?.InitializationSuccessful ?? false
                ? "Activity located and initialized"
                : "Activity located, it's already initialized";

            await RefreshAInfo(activity);
        }
        else
        {
            message = "Unable to locate Activity";
        }
    }

    private async Task GetStatus()
    {
        if (locator.TryLocateActivity(GetCurrentId(), out var activity))
        {
            var response = (await activity.GetStatusAsync())?.Response;
            message = response?.BehaviorStatus switch
            {
                BehaviorStatus.NotInitialized => "Activity located, it's not initialized",
                BehaviorStatus.Initialized => "Activity located, it's initialized",
                BehaviorStatus.Finalized => "Activity located, it's finalized",
                _ => ""
            };

            await RefreshAInfo(activity);
        }
        else
        {
            message = "Unable to locate Activity";
        }
    }

    private async Task RunActivity()
    {
        if (locator.TryLocateActivity(GetCurrentId(), out var activity))
        {
            await activity.InitializeAsync();
            await RefreshAInfo(activity);
        }
        else
        {
            message = "Unable to locate Activity";
        }
    }

    private async Task PushActivity()
    {
        if (locator.TryLocateActivity(GetCurrentId(), out var activity))
        {
            await activity.SendAsync(new Examples.Common.SomeEvent());
        }
        else
        {
            message = "Unable to locate Activity";
        }
    }

    private async Task Reset()
    {
        if (locator.TryLocateActivity(GetCurrentId(), out var activity))
        {
            var response = (await activity.ResetAsync())?.Response;
            message = "Activity resetted";

            await RefreshAInfo(activity);
        }
        else
        {
            message = "Unable to locate Activity";
        }
    }

    private string GetEventName(string eventName)
        => eventName.Contains('<')
            ? $"{eventName.Split('<').First().Split('.').Last()}<{eventName.Split('<').Last()}"
            : eventName.Split('.').Last();

    private async Task SendEvent(string eventName)
    {
        var eventType = Type.GetType($"{eventName}, Examples.Common");

        if (eventType != null)
        {
            var ev = System.Activator.CreateInstance(eventType) as Event;

            if (locator.TryLocateActivity(GetCurrentId(), out var activity))
            {
                var result = await activity.SendAsync(ev);

                if (!(result.Validation?.IsValid ?? true))
                {
                    message = "Event invalid";
                }

                await RefreshAInfo(activity);
            }
        }
    }
}