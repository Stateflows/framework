@page "/"
@inject IStateMachineLocator locator

<PageTitle>State Machines</PageTitle>

<div>
    <label>State Machine name</label><br />
    <input @bind="StateMachineName" size="50" />
</div>
<div>
    <label>State Machine instance</label><br />
    <input @bind="StateMachineInstance" size="50" />
</div>
<div>
    <button class="btn btn-primary" @onclick="Initialize">Locate and initialize</button>
    <button class="btn btn-primary" @onclick="GetStatus">Check status</button>
    <button class="btn btn-primary" @onclick="Reset">Reset</button>
</div>

@if (message != "")
{
    <div style="border: solid thin #eee; padding: 10px; margin-top: 10px; border-radius: 10px;">
        <strong>@message</strong>

        @if (plantUmlUrl != null)
        {
            <div style="display: flex;">
                <div style="display: flex; flex-direction: column; width: 300px; padding: 10px; border: solid thin #ddd; background-color: #eee; border-radius: 10px; margin-top: 10px">
                    @if (expectedEvents != null)
                    {
                        <span>Events expected in current state:</span>
                        @foreach (var eventName in expectedEvents)
                        {
                            <button class="btn btn-primary" style="margin-top: 5px;" @onclick="() => SendEvent(eventName)">Send <strong>@GetEventName(eventName)</strong></button>
                        }
                    }
                </div>
                <div style="flex-grow: 1; text-align: center;">
                    <img src="@plantUmlUrl" />
                </div>
            </div>
        }
    </div>
}

@code {
    private string? plantUmlUrl = null;
    private string? stateMachineName = "stateMachine1";
    private string? StateMachineName
    {
        get => stateMachineName;
        set
        {
            stateMachineName = value;
            ClearSMInfo();
        }
    }

    private string? stateMachineInstance = "x";
    private string? StateMachineInstance
    {
        get => stateMachineInstance;
        set
        {
            stateMachineInstance = value;
            ClearSMInfo();
        }
    }

    private IEnumerable<string>? expectedEvents { get; set; }

    private string message = "";

    private IStateMachine? _stateMachine = null;

    private async Task<IStateMachine?> GetStateMachineAsync()
    {
        var instance = $"{stateMachineInstance}";
        if (_stateMachine?.Id == GetCurrentId())
        {
            return _stateMachine;
        }

        if (_stateMachine != null)
        {
            await _stateMachine.UnwatchCurrentStateAsync();
            await _stateMachine.UnwatchPlantUmlAsync();
            _stateMachine.Dispose();
        }

        if (locator.TryLocateStateMachine(GetCurrentId(), out _stateMachine))
        {
            await _stateMachine.WatchCurrentStateAsync(async n =>
            {
                Console.WriteLine($"current state changed: {instance}");
                expectedEvents = n.ExpectedEvents;
                message = n.BehaviorStatus switch
                {
                    BehaviorStatus.NotInitialized => "State Machine located, it's not initialized",
                    BehaviorStatus.Initialized => "State Machine located, it's initialized",
                    BehaviorStatus.Finalized => "State Machine located, it's finalized",
                    _ => ""
                };

                await InvokeAsync(() => StateHasChanged());
            });

            await _stateMachine.WatchPlantUmlAsync(async n =>
            {
                plantUmlUrl = n.GetUrl();

                await InvokeAsync(() => StateHasChanged());
            });
        }
        else
        {
            message = "Unable to locate State Machine";
            _stateMachine = null;
        }

        return _stateMachine;
    }

    private StateMachineId GetCurrentId()
    {
        return new StateMachineId(stateMachineName, stateMachineInstance);
    }

    private void ClearSMInfo()
    {
        message = "";
        plantUmlUrl = null;
        expectedEvents = null;
    }

    private async Task RefreshSMInfo(IStateMachine stateMachine)
    {
        var result = await stateMachine.GetCurrentStateAsync();
        expectedEvents = result.Response?.ExpectedEvents;
        message = result.Response?.BehaviorStatus switch
        {
            BehaviorStatus.NotInitialized => "State Machine located, it's not initialized",
            BehaviorStatus.Initialized => "State Machine located, it's initialized",
            BehaviorStatus.Finalized => "State Machine located, it's finalized",
            _ => ""
        };

        plantUmlUrl = (await stateMachine.GetPlantUmlAsync()).Response.GetUrl();
    }

    private async Task Initialize()
    {
        var sm = await GetStateMachineAsync();
        if (sm != null)
        {
            var result = await sm.InitializeAsync();

            var msg = result.Response?.InitializationSuccessful ?? false
                ? "State Machine located and initialized"
                : "State Machine located, it's already initialized";

            if (!result.Response?.InitializationSuccessful ?? false)
            {
                await RefreshSMInfo(sm);
            }

            message = msg;
        }
        else
        {
            message = "Unable to locate State Machine";
        }
    }

    private async Task GetStatus()
    {
        var sm = await GetStateMachineAsync();
        if (sm != null)
        {
            await RefreshSMInfo(sm);
        }
    }

    private async Task Reset()
    {
        var sm = await GetStateMachineAsync();
        if (sm != null)
        {
            var response = (await sm.ResetAsync())?.Response;
            message = "State Machine resetted";
        }
    }

    private string GetEventName(string eventName)
        => eventName.Contains('<')
            ? $"{eventName.Split('<').First().Split('.').Last()}<{eventName.Split('<').Last()}"
            : eventName.Split('.').Last();

    private async Task SendEvent(string eventName)
    {
        var eventType = Type.GetType($"{eventName}, Examples.Common");

        if (eventType != null)
        {
            var ev = System.Activator.CreateInstance(eventType) as EventHolderHolder;

            var sm = await GetStateMachineAsync();
            if (sm != null)
            {
                var result = await sm.SendAsync(ev);

                if (!(result.Validation?.IsValid ?? true))
                {
                    message = "Event invalid";
                }
            }
        }
    }
}